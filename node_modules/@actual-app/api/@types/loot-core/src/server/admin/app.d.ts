import { UserAvailable, UserEntity, NewUserAccessEntity } from '../../types/models';
export type AdminHandlers = {
    'users-get': typeof getUsers;
    'user-delete-all': typeof deleteAllUsers;
    'user-add': typeof addUser;
    'user-update': typeof updateUser;
    'access-add': typeof addAccess;
    'access-delete-all': typeof deleteAllAccess;
    'access-get-available-users': typeof accessGetAvailableUsers;
    'transfer-ownership': typeof transferOwnership;
    'owner-created': typeof ownerCreated;
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: AdminHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "users-get" | "user-delete-all" | "user-add" | "user-update" | "access-add" | "access-delete-all" | "access-get-available-users" | "transfer-ownership" | "owner-created">(name: Name, func: AdminHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
declare function getUsers(): Promise<UserEntity[] | {
    error: string;
}>;
declare function deleteAllUsers(ids: Array<UserEntity['id']>): Promise<{
    someDeletionsFailed: boolean;
    ids?: number[];
} | {
    error: string;
}>;
declare function addUser(user: Omit<UserEntity, 'id'>): Promise<{
    error: string;
} | {
    id: string;
}>;
declare function updateUser(user: Omit<UserEntity, 'id'>): Promise<{
    error: string;
} | {
    id: string;
}>;
declare function addAccess(access: NewUserAccessEntity): Promise<{
    error?: string;
} | Record<string, never>>;
declare function deleteAllAccess({ fileId, ids, }: {
    fileId: string;
    ids: string[];
}): Promise<{
    someDeletionsFailed: boolean;
    ids?: number[];
} | {
    error: unknown;
}>;
declare function accessGetAvailableUsers(fileId: string): Promise<UserAvailable[] | {
    error: string;
}>;
declare function transferOwnership({ fileId, newUserId, }: {
    fileId: string;
    newUserId: string;
}): Promise<{
    error?: string;
} | Record<string, never>>;
declare function ownerCreated(): Promise<boolean>;
export {};
