import { RuleActionEntity, TransactionEntity, type RuleEntity } from '../../types/models';
import { Action } from '.';
type ValidationError = {
    conditionErrors: string[];
    actionErrors: string[];
};
export type RulesHandlers = {
    'rule-validate': typeof ruleValidate;
    'rule-add': typeof addRule;
    'rule-update': typeof updateRule;
    'rule-delete': typeof deleteRule;
    'rule-delete-all': typeof deleteAllRules;
    'rule-apply-actions': typeof applyRuleActions;
    'rule-add-payee-rename': typeof addRulePayeeRename;
    'rules-get': typeof getRules;
    'rule-get': typeof getRule;
    'rules-run': typeof runRules;
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: RulesHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "rule-validate" | "rule-add" | "rule-update" | "rule-delete" | "rule-delete-all" | "rule-apply-actions" | "rule-add-payee-rename" | "rules-get" | "rule-get" | "rules-run">(name: Name, func: RulesHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
declare function ruleValidate(rule: Partial<RuleEntity>): Promise<{
    error: ValidationError | null;
}>;
declare function addRule(rule: Omit<RuleEntity, 'id'>): Promise<{
    error: ValidationError;
} | RuleEntity>;
declare function updateRule<PartialRule extends Partial<Omit<RuleEntity, 'id'>> & Pick<RuleEntity, 'id'>>(rule: PartialRule): Promise<{
    error: ValidationError;
} | PartialRule>;
declare function deleteRule(id: RuleEntity['id']): Promise<boolean>;
declare function deleteAllRules(ids: Array<RuleEntity['id']>): Promise<{
    someDeletionsFailed: boolean;
}>;
declare function applyRuleActions({ transactions, actions, }: {
    transactions: TransactionEntity[];
    actions: Array<Action | RuleActionEntity>;
}): Promise<null | {
    added: TransactionEntity[];
    updated: unknown[];
}>;
declare function addRulePayeeRename({ fromNames, to, }: {
    fromNames: string[];
    to: string;
}): Promise<string>;
declare function getRule({ id, }: {
    id: RuleEntity['id'];
}): Promise<RuleEntity | null>;
declare function getRules(): Promise<RuleEntity[]>;
declare function runRules({ transaction, }: {
    transaction: TransactionEntity;
}): Promise<TransactionEntity>;
export {};
