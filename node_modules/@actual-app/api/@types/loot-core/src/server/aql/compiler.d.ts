import { QueryState } from '../../shared/query';
export declare function quoteAlias(alias: any): any;
export declare function isAggregateQuery(queryState: any): boolean;
type Schema = unknown;
export type SchemaConfig = {
    tableViews?: Record<string, string> | ((name: string, config: {
        withDead: any;
        isJoin: any;
        tableOptions: any;
    }) => string);
    tableFilters?: (name: string) => unknown[];
    customizeQuery?: (queryState: QueryState) => QueryState;
    views?: Record<string, {
        fields?: Record<string, string>;
        [key: `v_${string}`]: string | ((internalFields: any, publicFields: any) => string);
    }>;
};
export type OutputTypes = Map<string, string | number | null>;
type NamedParameter = {
    type: string;
    paramName: string;
    paramType?: string;
    value: string;
};
type CompileStack = unknown[];
export type CompilerState = {
    schema: Schema;
    implicitTableName: string;
    implicitTableId: string;
    paths: Map<string, unknown>;
    dependencies: string[];
    compileStack: CompileStack;
    outputTypes: OutputTypes;
    validateRefs: boolean;
    namedParameters: NamedParameter[];
};
export type SqlPieces = {
    select: string;
    from: string;
    joins: string;
    where: string;
    groupBy: string;
    orderBy: string;
    limit: number | null;
    offset: number | null;
};
export declare function compileQuery(queryState: QueryState, schema: Schema, schemaConfig?: SchemaConfig): {
    sqlPieces: SqlPieces;
    state: CompilerState;
};
export declare function defaultConstructQuery(queryState: QueryState, compilerState: CompilerState, sqlPieces: SqlPieces): string;
export declare function generateSQLWithState(queryState: QueryState, schema?: Schema, schemaConfig?: SchemaConfig): {
    sql: string;
    state: CompilerState;
};
export {};
