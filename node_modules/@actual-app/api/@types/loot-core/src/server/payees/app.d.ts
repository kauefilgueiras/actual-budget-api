import { Diff } from '../../shared/util';
import { PayeeEntity, RuleEntity } from '../../types/models';
export type PayeesHandlers = {
    'payee-create': typeof createPayee;
    'common-payees-get': typeof getCommonPayees;
    'payees-get': typeof getPayees;
    'payees-get-orphaned': typeof getOrphanedPayees;
    'payees-get-rule-counts': typeof getPayeeRuleCounts;
    'payees-merge': typeof mergePayees;
    'payees-batch-change': typeof batchChangePayees;
    'payees-check-orphaned': typeof checkOrphanedPayees;
    'payees-get-rules': typeof getPayeeRules;
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: PayeesHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "payee-create" | "common-payees-get" | "payees-get" | "payees-get-orphaned" | "payees-get-rule-counts" | "payees-merge" | "payees-batch-change" | "payees-check-orphaned" | "payees-get-rules">(name: Name, func: PayeesHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
declare function createPayee({ name }: {
    name: PayeeEntity['name'];
}): Promise<string>;
declare function getCommonPayees(): Promise<PayeeEntity[]>;
declare function getPayees(): Promise<PayeeEntity[]>;
declare function getOrphanedPayees(): Promise<Array<Pick<PayeeEntity, 'id'>>>;
declare function getPayeeRuleCounts(): Promise<Record<string, number>>;
declare function mergePayees({ targetId, mergeIds, }: {
    targetId: PayeeEntity['id'];
    mergeIds: Array<PayeeEntity['id']>;
}): Promise<void>;
declare function batchChangePayees({ added, deleted, updated, }: Partial<Diff<PayeeEntity>>): Promise<void>;
declare function checkOrphanedPayees({ ids, }: {
    ids: Array<PayeeEntity['id']>;
}): Promise<Array<PayeeEntity['id']>>;
declare function getPayeeRules({ id, }: {
    id: PayeeEntity['id'];
}): Promise<RuleEntity[]>;
export {};
