import { CategoryEntity, CategoryGroupEntity, PayeeEntity } from '../types/models';
import { DbAccount, DbCategory, DbCategoryGroup, DbPayee } from './db';
export declare function requiredFields<T extends object, K extends keyof T>(name: string, row: T, fields: K[], update?: boolean): void;
export declare function toDateRepr(str: string): number;
export declare function fromDateRepr(number: number): string;
export declare const accountModel: {
    validate(account: Partial<DbAccount>, { update }?: {
        update?: boolean;
    }): DbAccount;
};
export declare const categoryModel: {
    validate(category: Partial<DbCategory>, { update }?: {
        update?: boolean;
    }): DbCategory;
    toDb(category: CategoryEntity, { update }?: {
        update?: boolean;
    }): DbCategory;
    fromDb(category: DbCategory): CategoryEntity;
};
export declare const categoryGroupModel: {
    validate(categoryGroup: Partial<DbCategoryGroup>, { update }?: {
        update?: boolean;
    }): DbCategoryGroup;
    toDb(categoryGroup: CategoryGroupEntity, { update }?: {
        update?: boolean;
    }): DbCategoryGroup;
    fromDb(categoryGroup: DbCategoryGroup & {
        categories: DbCategory[];
    }): CategoryGroupEntity;
};
export declare const payeeModel: {
    validate(payee: Partial<DbPayee>, { update }?: {
        update?: boolean;
    }): DbPayee;
    toDb(payee: PayeeEntity, { update }?: {
        update?: boolean;
    }): DbPayee;
    fromDb(payee: DbPayee): PayeeEntity;
};
