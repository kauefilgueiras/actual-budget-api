import { TransactionFilterEntity } from '../../types/models';
declare function createFilter(filter: any): Promise<TransactionFilterEntity['id']>;
declare function updateFilter(filter: any): Promise<void>;
declare function deleteFilter(id: TransactionFilterEntity['id']): Promise<void>;
export type FiltersHandlers = {
    'filter-create': typeof createFilter;
    'filter-update': typeof updateFilter;
    'filter-delete': typeof deleteFilter;
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: FiltersHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "filter-create" | "filter-update" | "filter-delete">(name: Name, func: FiltersHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
export {};
