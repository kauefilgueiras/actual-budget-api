import { QueryState } from '../../shared/query';
export type SpreadsheetHandlers = {
    'get-cell': typeof getCell;
    'get-cell-names': typeof getCellNames;
    'create-query': typeof createQuery;
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: SpreadsheetHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "get-cell" | "get-cell-names" | "create-query">(name: Name, func: SpreadsheetHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
declare function getCell({ sheetName, name, }: {
    sheetName: string;
    name: string;
}): Promise<{
    name: string;
    value: string | number | boolean;
}>;
declare function getCellNames({ sheetName }: {
    sheetName: string;
}): Promise<any[]>;
declare function createQuery({ sheetName, name, query, }: {
    sheetName: string;
    name: string;
    query: QueryState;
}): Promise<string>;
export {};
