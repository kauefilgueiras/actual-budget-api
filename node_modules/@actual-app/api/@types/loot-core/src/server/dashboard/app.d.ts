import { type Widget } from '../../types/models';
import { type EverythingButIdOptional } from '../../types/util';
declare function updateDashboard(widgets: EverythingButIdOptional<Omit<Widget, 'tombstone'>>[]): Promise<void>;
declare function updateDashboardWidget(widget: EverythingButIdOptional<Omit<Widget, 'tombstone'>>): Promise<void>;
declare function resetDashboard(): Promise<void>;
declare function addDashboardWidget(widget: Omit<Widget, 'id' | 'x' | 'y' | 'tombstone'> & Partial<Pick<Widget, 'x' | 'y'>>): Promise<void>;
declare function removeDashboardWidget(widgetId: string): Promise<void>;
declare function importDashboard({ filepath }: {
    filepath: string;
}): Promise<{
    status: "ok";
    error?: undefined;
    message?: undefined;
} | {
    error: "json-parse-error";
    status?: undefined;
    message?: undefined;
} | {
    error: "validation-error";
    message: string;
    status?: undefined;
} | {
    error: "internal-error";
    status?: undefined;
    message?: undefined;
}>;
export type DashboardHandlers = {
    'dashboard-update': typeof updateDashboard;
    'dashboard-update-widget': typeof updateDashboardWidget;
    'dashboard-reset': typeof resetDashboard;
    'dashboard-add-widget': typeof addDashboardWidget;
    'dashboard-remove-widget': typeof removeDashboardWidget;
    'dashboard-import': typeof importDashboard;
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: DashboardHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "dashboard-update" | "dashboard-update-widget" | "dashboard-reset" | "dashboard-add-widget" | "dashboard-remove-widget" | "dashboard-import">(name: Name, func: DashboardHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
export {};
