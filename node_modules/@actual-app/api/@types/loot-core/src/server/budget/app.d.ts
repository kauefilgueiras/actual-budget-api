import { CategoryEntity, CategoryGroupEntity } from '../../types/models';
import * as actions from './actions';
import * as cleanupActions from './cleanup-template';
import * as goalActions from './goal-template';
export interface BudgetHandlers {
    'budget/budget-amount': typeof actions.setBudget;
    'budget/copy-previous-month': typeof actions.copyPreviousMonth;
    'budget/copy-single-month': typeof actions.copySinglePreviousMonth;
    'budget/set-zero': typeof actions.setZero;
    'budget/set-3month-avg': typeof actions.set3MonthAvg;
    'budget/set-6month-avg': typeof actions.set6MonthAvg;
    'budget/set-12month-avg': typeof actions.set12MonthAvg;
    'budget/set-n-month-avg': typeof actions.setNMonthAvg;
    'budget/check-templates': typeof goalActions.runCheckTemplates;
    'budget/apply-goal-template': typeof goalActions.applyTemplate;
    'budget/apply-multiple-templates': typeof goalActions.applyMultipleCategoryTemplates;
    'budget/overwrite-goal-template': typeof goalActions.overwriteTemplate;
    'budget/apply-single-template': typeof goalActions.applySingleCategoryTemplate;
    'budget/cleanup-goal-template': typeof cleanupActions.cleanupTemplate;
    'budget/hold-for-next-month': typeof actions.holdForNextMonth;
    'budget/reset-hold': typeof actions.resetHold;
    'budget/cover-overspending': typeof actions.coverOverspending;
    'budget/transfer-available': typeof actions.transferAvailable;
    'budget/cover-overbudgeted': typeof actions.coverOverbudgeted;
    'budget/transfer-category': typeof actions.transferCategory;
    'budget/set-carryover': typeof actions.setCategoryCarryover;
    'budget/reset-income-carryover': typeof actions.resetIncomeCarryover;
    'get-categories': typeof getCategories;
    'get-budget-bounds': typeof getBudgetBounds;
    'envelope-budget-month': typeof envelopeBudgetMonth;
    'tracking-budget-month': typeof trackingBudgetMonth;
    'category-create': typeof createCategory;
    'category-update': typeof updateCategory;
    'category-move': typeof moveCategory;
    'category-delete': typeof deleteCategory;
    'get-category-groups': typeof getCategoryGroups;
    'category-group-create': typeof createCategoryGroup;
    'category-group-update': typeof updateCategoryGroup;
    'category-group-move': typeof moveCategoryGroup;
    'category-group-delete': typeof deleteCategoryGroup;
    'must-category-transfer': typeof isCategoryTransferRequired;
}
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: BudgetHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "budget/budget-amount" | "budget/copy-previous-month" | "budget/copy-single-month" | "budget/set-zero" | "budget/set-3month-avg" | "budget/set-6month-avg" | "budget/set-12month-avg" | "budget/set-n-month-avg" | "budget/check-templates" | "budget/apply-goal-template" | "budget/apply-multiple-templates" | "budget/overwrite-goal-template" | "budget/apply-single-template" | "budget/cleanup-goal-template" | "budget/hold-for-next-month" | "budget/reset-hold" | "budget/cover-overspending" | "budget/transfer-available" | "budget/cover-overbudgeted" | "budget/transfer-category" | "budget/set-carryover" | "budget/reset-income-carryover" | "get-categories" | "get-budget-bounds" | "envelope-budget-month" | "tracking-budget-month" | "category-create" | "category-update" | "category-move" | "category-delete" | "get-category-groups" | "category-group-create" | "category-group-update" | "category-group-move" | "category-group-delete" | "must-category-transfer">(name: Name, func: BudgetHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
declare function getCategories(): Promise<{
    grouped: CategoryGroupEntity[];
    list: CategoryEntity[];
}>;
declare function getBudgetBounds(): Promise<{
    start: string;
    end: string;
}>;
declare function envelopeBudgetMonth({ month }: {
    month: string;
}): Promise<{
    value: string | number | boolean;
    name: string;
}[]>;
declare function trackingBudgetMonth({ month }: {
    month: string;
}): Promise<{
    value: string | number | boolean;
    name: string;
}[]>;
declare function createCategory({ name, groupId, isIncome, hidden, }: {
    name: string;
    groupId: CategoryGroupEntity['id'];
    isIncome?: boolean;
    hidden?: boolean;
}): Promise<CategoryEntity['id']>;
declare function updateCategory(category: CategoryEntity): Promise<{
    error?: {
        type: 'category-exists';
    };
}>;
declare function moveCategory({ id, groupId, targetId, }: {
    id: CategoryEntity['id'];
    groupId: CategoryGroupEntity['id'];
    targetId: CategoryEntity['id'];
}): Promise<void>;
declare function deleteCategory({ id, transferId, }: {
    id: CategoryEntity['id'];
    transferId?: CategoryEntity['id'];
}): Promise<{
    error?: 'no-categories' | 'category-type';
}>;
declare function getCategoryGroups(): Promise<CategoryGroupEntity[]>;
declare function createCategoryGroup({ name, isIncome, hidden, }: {
    name: CategoryGroupEntity['name'];
    isIncome?: CategoryGroupEntity['is_income'];
    hidden?: CategoryGroupEntity['hidden'];
}): Promise<CategoryGroupEntity['id']>;
declare function updateCategoryGroup(group: CategoryGroupEntity): Promise<void>;
declare function moveCategoryGroup({ id, targetId, }: {
    id: CategoryGroupEntity['id'];
    targetId: CategoryGroupEntity['id'];
}): Promise<void>;
declare function deleteCategoryGroup({ id, transferId, }: {
    id: CategoryGroupEntity['id'];
    transferId: CategoryGroupEntity['id'];
}): Promise<void>;
declare function isCategoryTransferRequired({ id, }: {
    id: CategoryEntity['id'];
}): Promise<boolean>;
export {};
