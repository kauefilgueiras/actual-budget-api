import { CategoryEntity } from '../../types/models';
import { AverageTemplate, CopyTemplate, PercentageTemplate, SimpleTemplate, SpendTemplate, Template, PeriodicTemplate } from '../../types/models/templates';
export declare class CategoryTemplateContext {
    static init(templates: Template[], category: CategoryEntity, month: string, budgeted: number): Promise<CategoryTemplateContext>;
    isGoalOnly(): boolean;
    getPriorities(): number[];
    hasRemainder(): boolean;
    getRemainderWeight(): number;
    getLimitExcess(): number;
    runAll(available: number): Promise<number>;
    runTemplatesForPriority(priority: number, budgetAvail: number, availStart: number): Promise<number>;
    runRemainder(budgetAvail: number, perWeight: number): number;
    getValues(): {
        budgeted: number;
        goal: number;
        longGoal: boolean;
    };
    readonly category: CategoryEntity;
    private month;
    private templates;
    private remainder;
    private goals;
    private priorities;
    readonly hideDecimal: boolean;
    private remainderWeight;
    private toBudgetAmount;
    private fullAmount;
    private isLongGoal;
    private goalAmount;
    private fromLastMonth;
    private limitMet;
    private limitExcess;
    private limitAmount;
    private limitCheck;
    private limitHold;
    readonly previouslyBudgeted: number;
    protected constructor(templates: Template[], category: CategoryEntity, month: string, fromLastMonth: number, budgeted: number, hideDecimal?: boolean);
    private runGoal;
    static checkByAndScheduleAndSpend(templates: Template[], month: string): Promise<void>;
    static checkPercentage(templates: Template[]): Promise<void>;
    private checkLimit;
    private checkSpend;
    private checkGoal;
    private removeFraction;
    static runSimple(template: SimpleTemplate, limit: number): number;
    static runCopy(template: CopyTemplate, templateContext: CategoryTemplateContext): Promise<number>;
    static runPeriodic(template: PeriodicTemplate, templateContext: CategoryTemplateContext): number;
    static runSpend(template: SpendTemplate, templateContext: CategoryTemplateContext): Promise<number>;
    static runPercentage(template: PercentageTemplate, availableFunds: number, templateContext: CategoryTemplateContext): Promise<number>;
    static runAverage(template: AverageTemplate, templateContext: CategoryTemplateContext): Promise<number>;
    static runBy(templateContext: CategoryTemplateContext): number;
}
