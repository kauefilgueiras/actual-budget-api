import { Budget } from '../../types/budget';
import * as cloudStorage from '../cloud-storage';
import { ImportableBudgetType } from '../importers';
export type BudgetFileHandlers = {
    'validate-budget-name': typeof handleValidateBudgetName;
    'unique-budget-name': typeof handleUniqueBudgetName;
    'get-budgets': typeof getBudgets;
    'get-remote-files': typeof getRemoteFiles;
    'get-user-file-info': typeof getUserFileInfo;
    'reset-budget-cache': typeof resetBudgetCache;
    'upload-budget': typeof uploadBudget;
    'download-budget': typeof downloadBudget;
    'sync-budget': typeof syncBudget;
    'load-budget': typeof loadBudget;
    'create-demo-budget': typeof createDemoBudget;
    'close-budget': typeof closeBudget;
    'delete-budget': typeof deleteBudget;
    'duplicate-budget': typeof duplicateBudget;
    'create-budget': typeof createBudget;
    'import-budget': typeof importBudget;
    'export-budget': typeof exportBudget;
    'upload-file-web': typeof uploadFileWeb;
    'backups-get': typeof getBackups;
    'backup-load': typeof loadBackup;
    'backup-make': typeof makeBackup;
    'get-last-opened-backup': typeof getLastOpenedBackup;
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: BudgetFileHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "load-budget" | "validate-budget-name" | "unique-budget-name" | "get-budgets" | "get-remote-files" | "get-user-file-info" | "reset-budget-cache" | "upload-budget" | "download-budget" | "sync-budget" | "create-demo-budget" | "close-budget" | "delete-budget" | "duplicate-budget" | "create-budget" | "import-budget" | "export-budget" | "upload-file-web" | "backups-get" | "backup-load" | "backup-make" | "get-last-opened-backup">(name: Name, func: BudgetFileHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
declare function handleValidateBudgetName({ name }: {
    name: string;
}): Promise<{
    valid: boolean;
    message?: string;
}>;
declare function handleUniqueBudgetName({ name }: {
    name: string;
}): Promise<string>;
declare function getBudgets(): Promise<Budget[]>;
declare function getRemoteFiles(): Promise<cloudStorage.RemoteFile[]>;
declare function getUserFileInfo(fileId: string): Promise<cloudStorage.RemoteFile>;
declare function resetBudgetCache(): Promise<void>;
declare function uploadBudget({ id }?: {
    id?: Budget['id'];
}): Promise<{
    error?: {
        reason: string;
    };
}>;
declare function downloadBudget({ cloudFileId, }: {
    cloudFileId: Budget['cloudFileId'];
}): Promise<{
    id?: Budget['id'];
    error?: {
        reason: string;
        meta?: unknown;
    };
}>;
declare function syncBudget(): Promise<{
    error?: {
        message: string;
        reason: string;
        meta: unknown;
    };
}>;
declare function loadBudget({ id }: {
    id: Budget['id'];
}): Promise<{
    error?: "budget-not-found" | "loading-budget" | "out-of-sync-migrations" | "out-of-sync-data" | "opening-budget";
}>;
declare function createDemoBudget(): Promise<{
    error: "budget-not-found" | "loading-budget" | "out-of-sync-migrations" | "out-of-sync-data" | "opening-budget";
} | {
    error?: undefined;
}>;
declare function closeBudget(): Promise<string>;
declare function deleteBudget({ id, cloudFileId, }: {
    id?: Budget['id'];
    cloudFileId?: Budget['cloudFileId'];
}): Promise<"ok" | "fail">;
declare function duplicateBudget({ id, newName, cloudSync, open, }: {
    id: Budget['id'];
    newName: Budget['name'];
    cloudSync: boolean;
    open: 'none' | 'original' | 'copy';
}): Promise<Budget['id']>;
declare function createBudget({ budgetName, avoidUpload, testMode, testBudgetId, }?: {
    budgetName?: Budget['name'];
    avoidUpload?: boolean;
    testMode?: boolean;
    testBudgetId?: Budget['name'];
}): Promise<{
    error: "budget-not-found" | "loading-budget" | "out-of-sync-migrations" | "out-of-sync-data" | "opening-budget";
} | {
    error?: undefined;
}>;
declare function importBudget({ filepath, type, }: {
    filepath: string;
    type: ImportableBudgetType;
}): Promise<{
    error?: string;
}>;
declare function exportBudget(): Promise<{
    data: Buffer<ArrayBuffer>;
    error?: undefined;
} | {
    error: string;
    data?: undefined;
}>;
declare function uploadFileWeb({ filename, contents, }: {
    filename: string;
    contents: ArrayBuffer;
}): Promise<{}>;
declare function getBackups({ id }: {
    id: any;
}): Promise<import("./backups").Backup[]>;
declare function loadBackup({ id, backupId }: {
    id: any;
    backupId: any;
}): Promise<void>;
declare function makeBackup({ id }: {
    id: any;
}): Promise<void>;
declare function getLastOpenedBackup(): Promise<string>;
export {};
