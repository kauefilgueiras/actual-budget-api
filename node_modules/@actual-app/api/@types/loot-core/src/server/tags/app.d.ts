import { Tag } from '../../types/models';
export type TagsHandlers = {
    'tags-get': typeof getTags;
    'tags-create': typeof createTag;
    'tags-delete': typeof deleteTag;
    'tags-delete-all': typeof deleteAllTags;
    'tags-update': typeof updateTag;
    'tags-find': typeof findTags;
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: TagsHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "tags-get" | "tags-create" | "tags-delete" | "tags-delete-all" | "tags-update" | "tags-find">(name: Name, func: TagsHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
declare function getTags(): Promise<Tag[]>;
declare function createTag({ tag, color, description, }: Omit<Tag, 'id'>): Promise<Tag>;
declare function deleteTag(tag: Tag): Promise<Tag['id']>;
declare function deleteAllTags(ids: Array<Tag['id']>): Promise<Array<Tag['id']>>;
declare function updateTag(tag: Tag): Promise<Tag>;
declare function findTags(): Promise<Tag[]>;
export {};
