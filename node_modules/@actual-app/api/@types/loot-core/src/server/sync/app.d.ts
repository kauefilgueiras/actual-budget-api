export type SyncHandlers = {
    sync: typeof sync;
    'sync-reset': typeof resetSync;
    'sync-repair': typeof repairSync;
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: SyncHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "sync" | "sync-reset" | "sync-repair">(name: Name, func: SyncHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
declare function sync(): Promise<{
    messages: import(".").Message[];
} | {
    error: {
        message: string;
        reason: string;
        meta: unknown;
    };
}>;
declare function resetSync(): Promise<{
    error?: {
        reason: string;
        meta?: unknown;
    };
}>;
declare function repairSync(): Promise<void>;
export {};
