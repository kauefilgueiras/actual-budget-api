import { OpenIdConfig } from '../../types/models';
export type AuthHandlers = {
    'get-did-bootstrap': typeof didBootstrap;
    'subscribe-needs-bootstrap': typeof needsBootstrap;
    'subscribe-bootstrap': typeof bootstrap;
    'subscribe-get-login-methods': typeof getLoginMethods;
    'subscribe-get-user': typeof getUser;
    'subscribe-change-password': typeof changePassword;
    'subscribe-sign-in': typeof signIn;
    'subscribe-sign-out': typeof signOut;
    'subscribe-set-token': typeof setToken;
    'enable-openid': typeof enableOpenId;
    'get-openid-config': typeof getOpenIdConfig;
    'enable-password': typeof enablePassword;
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: AuthHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "get-did-bootstrap" | "subscribe-needs-bootstrap" | "subscribe-bootstrap" | "subscribe-get-login-methods" | "subscribe-get-user" | "subscribe-change-password" | "subscribe-sign-in" | "subscribe-sign-out" | "subscribe-set-token" | "enable-openid" | "get-openid-config" | "enable-password">(name: Name, func: AuthHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
declare function didBootstrap(): Promise<boolean>;
declare function needsBootstrap({ url }?: {
    url?: string;
}): Promise<{
    error: string;
    bootstrapped?: undefined;
    hasServer?: undefined;
    availableLoginMethods?: undefined;
    multiuser?: undefined;
} | {
    bootstrapped: boolean;
    hasServer: boolean;
    error?: undefined;
    availableLoginMethods?: undefined;
    multiuser?: undefined;
} | {
    bootstrapped: boolean;
    availableLoginMethods: {
        method: string;
        displayName: string;
        active: boolean;
    }[];
    multiuser: boolean;
    hasServer: boolean;
    error?: undefined;
}>;
declare function bootstrap(loginConfig: {
    password?: string;
    openId?: OpenIdConfig;
}): Promise<{
    error: string;
} | {
    error?: undefined;
}>;
declare function getLoginMethods(): Promise<{
    error: string;
    methods?: undefined;
} | {
    methods: {
        method: string;
        displayName: string;
        active: boolean;
    }[];
    error?: undefined;
}>;
declare function getUser(): Promise<{
    offline: boolean;
    userName?: undefined;
    permission?: undefined;
    userId?: undefined;
    displayName?: undefined;
    loginMethod?: undefined;
    tokenExpired?: undefined;
} | {
    offline: boolean;
    userName: any;
    permission: any;
    userId: any;
    displayName: any;
    loginMethod: any;
    tokenExpired: boolean;
}>;
declare function changePassword({ password }: {
    password: string;
}): Promise<{
    error: string;
} | {
    error?: undefined;
}>;
declare function signIn(loginInfo: {
    password: string;
    loginMethod?: string;
} | {
    returnUrl: string;
    loginMethod?: 'openid';
}): Promise<{
    error: string;
    redirectUrl?: undefined;
} | {
    redirectUrl: string;
    error?: undefined;
} | {
    error?: undefined;
    redirectUrl?: undefined;
}>;
declare function signOut(): Promise<string>;
declare function setToken({ token }: {
    token: string;
}): Promise<void>;
declare function enableOpenId(openIdConfig: {
    openId: OpenIdConfig;
}): Promise<{
    error: string;
} | {
    error?: undefined;
}>;
declare function getOpenIdConfig({ password }: {
    password: string;
}): Promise<{
    openId: OpenIdConfig;
} | {
    error: string;
}>;
declare function enablePassword(passwordConfig: {
    password: string;
}): Promise<{
    error: string;
} | {
    error?: undefined;
}>;
export {};
