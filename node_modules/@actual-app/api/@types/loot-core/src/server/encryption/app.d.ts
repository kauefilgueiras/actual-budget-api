import { Budget } from '../../types/budget';
export type EncryptionHandlers = {
    'key-make': typeof keyMake;
    'key-test': typeof keyTest;
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: EncryptionHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "key-make" | "key-test">(name: Name, func: EncryptionHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
declare function keyMake({ password }: {
    password: string;
}): Promise<{
    error?: {
        reason: string;
        meta?: unknown;
    };
}>;
declare function keyTest({ cloudFileId, password, }: {
    cloudFileId?: Budget['cloudFileId'];
    password: string;
}): Promise<{
    error: {
        reason: string;
    };
} | {
    error?: undefined;
}>;
export {};
